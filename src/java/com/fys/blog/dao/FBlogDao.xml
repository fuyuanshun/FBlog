<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fys.blog.dao.FBlogDao">
    <!-- 查询所有的用户信息 -->
    <select id="selectUser" resultType="User">
        select username, nickname, last_login, birthday from user;
    </select>

    <!-- 查询所有的贴子 -->
    <resultMap id="PostsMap" type="Post_">
        <result property="id" column="id" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="user_id" column="nickname" />
        <result property="post_time" column="post_time" />
        <result property="root_id" column="root_id" />
        <association property="user" javaType="User">
           <id property="id" column="id"/>
           <result property="nickname" column="nickname"/>
           <result property="lastLogin" column="last_login"/>
           <result property="postId" column="post_id"/>
           <result property="birthday" column="birthday"/>
           <result property="level" column="level"/>
        </association>
    </resultMap>

    <select id="selectPost" resultMap="PostsMap" parameterType="Post_">
      select post.id, post.title, post.content, user.nickname, post.post_time, post.root_id, user.last_login, user.birthday, user.level from post_ as post join user on post.user_id = user.id;
    </select>

    <!-- 用户注册 -->
    <insert id="register" parameterType="User" >
        insert into user
        (username, password, nickname, birthday, level)
        values
        (#{username}, #{password}, #{nickname}, #{birthday}, "user");
    </insert>

    <!-- 通过用户名查询用户是否已经存在 -->
    <select id="userIsExist" resultType="String" parameterType="String">
        select username from user where username = #{username}
    </select>

    <!-- 查询用户名和密码是否存在于同一条记录中，用于登陆 -->
    <select id="login" parameterType="String" resultType="String">
        select id,username,password,nickname,last_login,post_id,birthday from user where
        username = #{username} and password = #{password}
    </select>

    <!-- 更新用户的最后一次登陆时间 -->
    <update id="updateLoginTime" parameterType="String">
        update user set last_login = now() where username = #{username}
    </update>

    <!-- 根据用户名查询用户的社区名称 -->
    <select id="selectNameByUsername" parameterType="String" resultType="String">
        select nickname from user where username = #{username};
    </select>

    <!-- 查询一个社区昵称是否已经存在 -->
    <select id="checkNickname" parameterType="String" resultType="String">
        select nickname from user where nickname = #{nickname};
    </select>

    <!-- 查询社区昵称和密码是否在同一条记录中，用于登陆-->
    <select id="login_nickname" parameterType="String" resultType="String">
        select id,nickname,password,nickname,last_login,post_id,birthday from user where
        nickname = #{nickname} and password = #{password}
    </select>

    <!-- 根据id查询贴子详细内容 -->
    <select id="post_detail" parameterType="String" resultMap="PostsMap">
        select post.id, post.title, post.content, u.nickname, post_time, u.last_login, u.post_id, u.birthday, u.level from post_ as post join user as u on post.user_id = u.id where post.id = #{id};
    </select>

    <!-- 根据社区昵称查询用户权限等级 -->
    <select id="getLevelByNickname" parameterType="String" resultType="String">
        select level from user where nickname = #{nickname};
    </select>

    <!-- 根据用户账号查询用户权限等级 -->
    <select id="getLevelByUsername" parameterType="String" resultType="String">
        select level from user where username = #{username};
    </select>

    <!-- 删除贴子 -->
    <delete id="deletePost" parameterType="String">
      delete from post_ where id = #{id} and root_id = #{root_id};
    </delete>

    <!-- 删除所有的子节点 -->
    <delete id="deleteChild" parameterType="String">
      delete from post_ where root_id = #{id};
    </delete>

    <!-- 根据id删除贴子 -->
    <delete id="deleteById" parameterType="String">
      delete from post_ where id = #{id};
    </delete>
</mapper>